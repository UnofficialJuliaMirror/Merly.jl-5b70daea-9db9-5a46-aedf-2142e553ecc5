var documenterSearchIndex = {"docs":
[{"location":"#Home-1","page":"Home","title":"Home","text":"","category":"section"},{"location":"#Merly.jl-1","page":"Home","title":"Merly.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Merly is a micro framework for declaring routes and handling requests. Quickly creating web applications in Julia with minimal effort.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pkg> add Merly\n#Release","category":"page"},{"location":"#An-example-in-Diana-1","page":"Home","title":"An example in Diana","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"using Merly\n\nu=\"hello\"\n\nserver = Merly.app()\n\n@page \"/\" \"Hello World!\"\n@page \"/hola/:usr1>\" \"<b>Hello {{usr1}}!</b>\"\n\n@route GET \"/get/:data>\" begin\n  \"get this back: {{data}}\"\nend\n\n@route POST \"/post\" begin\n  res.body = \"I did something!\"\nend\n\n@route POST|PUT|DELETE \"/\" begin\n  println(\"params: \",req.params)\n  println(\"query: \",req.query)\n  println(\"body: \",req.body)\n\n  res.headers[\"Content-Type\"]= \"text/plain\"\n\n  \"I did something!\"\nend\n\nGet(\"/data\", (req,res)->(begin\n  res.headers[\"Content-Type\"]= \"text/plain\"\n  u*\"data\"\nend))\n\n\nPost(\"/data\", (req,res)->(begin\n  println(\"params: \",req.params)\n  println(\"query: \",req.query)\n  println(\"body: \",req.body)\n  res.headers[\"Content-Type\"]= \"text/plain\"\n  global u=\"bye\"\n  \"I did something!\"\nend))\n\nserver.start(config=Dict(\"host\" => \"127.0.0.1\",\"port\" => 8000),verbose=false)","category":"page"},{"location":"#Data-stored-on-request-(req)-1","page":"Home","title":"Data stored on request (req)","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"  query   # data from the query url\n  params  # data from the regular expresion\n  body    # body of the request in dict or plane text\n  version # the protocol version\n  headers # the headers sent by the client","category":"page"},{"location":"#Data-stored-on-response-(req)-1","page":"Home","title":"Data stored on response (req)","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"  status\n  headers\n  body","category":"page"},{"location":"#Parameters-dictionary-1","page":"Home","title":"Parameters dictionary","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"@route GET \"/get/:data>\" begin\n  # matches \"GET /get/foo\" and \"GET /get/bar\"\n  # not accept special symbols (!,#,$,etc)\n  # req.params[\"data\"] is 'foo' or 'bar'\n  \"get this back: \"*req.params[\"data\"]\nend\n\n# it is possible to use regular expressions, enclosing them always between '(' ')'\n@route GET \"/regex/(\\\\w+\\\\d+)\" begin\n  # matches \"GET /regex/test1\" and \"GET /regex/test125\"\n  # req.params[1] is 'test1' or 'test125'\n   \"datos $(req.params[1])\"\nend","category":"page"},{"location":"#url-query-dictionary-1","page":"Home","title":"url query dictionary","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"@route POST|PUT|DELETE \"/\" begin\n  res.headers[\"Content-Type\"]= \"text/plain\"\n  # matches \"POST /?title=foo&author=bar\"\n  title = req.query[\"title\"]\n  author = req.query[\"author\"]\n  \"I did something!\"\nend","category":"page"},{"location":"#Dictionary-of-body-1","page":"Home","title":"Dictionary of body","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Payload","category":"page"},{"location":"#","page":"Home","title":"Home","text":"{\"data1\":\"Hello\"}","category":"page"},{"location":"#","page":"Home","title":"Home","text":"@route POST|PUT|DELETE \"/\" begin\n  res.headers[\"Content-Type\"]= \"text/plain\"\n  res.body = \"Payload data \"*req.body[\"data1\"]\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Payload","category":"page"},{"location":"#","page":"Home","title":"Home","text":"<Data>\n  <Data1>Hello World!</Data1>\n</Data>","category":"page"},{"location":"#","page":"Home","title":"Home","text":"@route POST|PUT|DELETE \"/\" begin\n  res.headers[\"Content-Type\"]= \"text/plain\"\n  \"Payload data \"*req.body[\"Data\"][\"Data1\"]\nend","category":"page"},{"location":"#Reply-JSON-1","page":"Home","title":"Reply JSON","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"@route POST|PUT|DELETE \"/\" begin\n  res.headers[\"Content-Type\"]=\"application/json\"\n  res.status = 200 #optional\n  \"{\\\"data1\\\":2,\\\"data2\\\":\\\"t\\\"}\"\nend\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"or","category":"page"},{"location":"#","page":"Home","title":"Home","text":"@route POST|PUT|DELETE \"/\" begin\n  res.headers[\"Content-Type\"]=\"application/json\"\n  info=Dict()\n  info[\"data1\"]=2\n  info[\"data2\"]=\"t\"\n  res.status = 200 #optional\n  res.body = JSON.json(info)\nend\n","category":"page"},{"location":"#Reply-XML-1","page":"Home","title":"Reply XML","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"@route POST|PUT|DELETE \"/\" begin\n  res.headers[\"Content-Type\"]=\"application/xml\"\n\n  \"<ListAllMyBucketsResult>\n    <Buckets>\n      <Bucket><Name>quotes</Name><CreationDate>2006-02-03T16:45:09.000Z</CreationDate></Bucket>\n      <Bucket><Name>samples</Name><CreationDate>2006-02-03T16:41:58.000Z</CreationDate></Bucket>\n    </Buckets>\n  </ListAllMyBucketsResult>\"\nend\n","category":"page"},{"location":"#Reply-File-1","page":"Home","title":"Reply File","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"@page \"/\" File(\"Index.html\")","category":"page"},{"location":"#Web-server-1","page":"Home","title":"Web server","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"# By default, the location where to look for the files that will\n# be exposed will be the same where the script is, if the files are\n# not found in that site, the location of the files can be established\n# with the following instruction.\nserver.webserverpath(\"C:\\\\path\")  # example in windows\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Possible values of webserverfiles\n\nserver.webserverfiles(\"*\") #\n \"*\"               Load all the files located in the path, except what started with \".\"\n \"jl\",\"clj|jl|py\"  Extension in files that will not be exposed","category":"page"},{"location":"#Not-found-message-1","page":"Home","title":"Not found message","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"server.notfound(\"<!DOCTYPE html>\n<html>\n<head><title>Not found</title></head>\n<body><h1>404, Not found</h1></body>\n</html>\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"server.notfound(\"notfound.html\")","category":"page"},{"location":"#CORS-1","page":"Home","title":"CORS","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"server.useCORS(true)","category":"page"},{"location":"#Headers-always-1","page":"Home","title":"Headers always","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can add headers that will always be returned in each request","category":"page"},{"location":"#","page":"Home","title":"Home","text":"server.headersalways(\"Strict-Transport-Security\",\"max-age=10886400; includeSubDomains; preload\")","category":"page"},{"location":"#Bonus-1","page":"Home","title":"Bonus","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you forgot the MIME type of a file you can use the next instruction","category":"page"},{"location":"#","page":"Home","title":"Home","text":"res.headers[\"Content-Type\"]= mimetypes[\"file extension\"]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"the file mimetypes.jl was taken from https://github.com/JuliaWeb/HttpServer.jl  guys are great","category":"page"},{"location":"#Index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"}]
}
